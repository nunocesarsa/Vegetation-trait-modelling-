
#library for PROSAIL and also Spectral Angle Mapper

library(hsdar)

#library for optimization procedure - you still should read what this actually does lol
library(SoilHyP)

#library that has some extra random generation tools
library(MCMCglmm)


#first step, creating a function to minimize
#we minimize the Spectral angle mapper - meaning, the difference between two generated spectra from PROSAIL model


sam.fun <- function(list.params,prosail.init=NULL){
  
  #this creates the set of data that we want to minimize to - prosail should receive it as a data.frame
  Cab_init <- list.params[1]
  Cw_init  <- list.params[2]
  LAI_init <- list.params[3]
  init.param <- data.frame(Cab=Cab_init,
                           Cw=Cw_init,
                           LAI=LAI_init)
  
  #this fetches new prosail parameters.. if you want to minimize towards an observation, then this, should be the observation
  #prosail.params <- data.frame(t(prosail.param),row.names = NULL)
  prosail.params <- data.frame(prosail.init,row.names = NULL)
  
  
  if (nrow(prosail.params)==0) {
    print("Warning: its minimizing to the default PROSAIL parameters")
    
    my.spectra <- PROSAIL(parameterList = init.param)
    #prosail default parameters 
    def.prosail <- PROSAIL() 
    
    #spectral angle mapper is used here
    spec.dist <- sam(my.spectra,def.prosail)
    fin.val <- spec.dist[1]
    
    }
  if (nrow(prosail.params)!=0) {
    prosail.params <- data.frame(t(prosail.init),row.names = NULL)
    #print("Minimizing to the objective biophysical parmeters")
    #print(prosail.param)
    
    my.spectra <- PROSAIL(parameterList = init.param)
    #prosail default parameters 
    def.prosail <- PROSAIL(parameterList = prosail.params) 
    
    #spectral angle mapper is used here
    spec.dist <- sam(my.spectra,def.prosail)
    fin.val <- spec.dist[1]
  }


  return(fin.val)
}

#now we set up the upper and lower limits (important! to ensure convergence)
lower_lim=c(30,0.005,0.5)
upper_lim=c(60,0.03,4)

#first we create our initial set of parameters, this could be anything random, hopefully within the limits
init.par <- c(Cab=rnorm(1,mean=40,sd=15),
              Cw=rnorm(1,mean=0.02,sd=0.005),
              LAI=rtnorm(1,mean=1,sd=3,lower=0,upper=6)) #these are generated from random samples

init.par <- c(40,0.02,2) #same as before just simpler.. and not random
    

#minimizes to default prosail (notice im varying only 3 params) (Cab = 40,Cw = 0.01,LAI = 1)
c1 <- SCEoptim(FUN = sam.fun,
               par = init.par,
               #method="L-BFGS-B",
               lower=lower_lim,
               upper=upper_lim)
c1$par


#minimizes to target 1 (Cab = 50 - all else default)
init.prosail <- c(Cab=50)
c2 <- SCEoptim(FUN = sam.fun,
               par = init.par,
               #method="L-BFGS-B",
               lower=lower_lim,
               upper=upper_lim,
               prosail.init=init.prosail)
c2$par

#minimizes to target 2 (Cab = 50, Cw=0.02, LAI =3)
init.prosail <- c(Cab=50,Cw=0.02,LAI=3)
c3 <- SCEoptim(FUN = sam.fun,
               par = init.par,
               #method="L-BFGS-B",
               lower=lower_lim,
               upper=upper_lim,
               prosail.init=init.prosail)
c3$par


#testing sam function
param.inp <- data.frame(t(init.par),row.names = NULL)
param.out <- data.frame(t(init.prosail),row.names = NULL)

sam.fun(init.par,param.out) #i should just make both inputs in the same format.. otherwise it is stupid

sam.fun(init.param)

bb <- PROSAIL(parameterList = tt)


plot(PROSAIL())
plot(PROSAIL(Cab = 50))
is.na(1)
